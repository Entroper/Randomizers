@using FF1Lib;


	<div id="Scale" class="tabcontent framed-content clearfix @(noTabLayout ? "no-tab" : "") @(IsOpen ? "" : "collapsed")">

		<h3 class="@(IsOpen ? "" : "h3-collapsed")"><a class="@(noTabLayout ? "collapsible-header" : "")" @onclick="(() => IsOpen = (!noTabLayout || !IsOpen))">Scale</a></h3>
		@if (IsOpen)
		{
	<div class="col1 full">
		<h4>Gold</h4>
		<DoubleSlider ShowMedian DoubleCol Id="clampMinimumPriceScaleLable" UpdateToolTip="@UpdateToolTipID" MinValue="0" MaxValue="500" Step="10" @bind-ValueHigh="Flags.PriceScaleFactorHigh" @bind-ValueLow="Flags.PriceScaleFactorLow">Prices:</DoubleSlider>
		<CheckBox UpdateToolTip="@UpdateToolTipID" Id="wrapPriceOverflowCheckBox" @bind-Value="Flags.WrapPriceOverflow">Wrap Overflowing Prices</CheckBox>
		<CheckBox UpdateToolTip="@UpdateToolTipID" Id="startingGoldCheckBox" @bind-Value="Flags.StartingGold">Scale Starting Gold</CheckBox>
		<TriStateCheckBox UpdateToolTip="@UpdateToolTipID" Id="excludeGoldFromScalingCheckBox" @bind-Value="Flags.ExcludeGoldFromScaling">Exclude Gold from scaling</TriStateCheckBox>
		<CheckBox Indent UpdateToolTip="@UpdateToolTipID" Id="cheapVendorItemCheckBox" @bind-Value="Flags.CheapVendorItem" IsEnabled="Flags.ExcludeGoldFromScaling">Cheap Vendor Item</CheckBox>
		<CheckBox Indent UpdateToolTip="@UpdateToolTipID" Id="applyExpBoostToGoldCheckBox" @bind-Value="Flags.ApplyExpBoostToGold" IsEnabled="Flags.ExcludeGoldFromScaling">Apply Flat Gold Boost to Enemies</CheckBox>

		<div class="row-seperator"></div>
		<h4>Encounter Rates</h4>
		<div class="row">
			<div class="col-lg-4 noleftpadding">Overworld Encounter Rate:</div>
			<div class="col-lg-4">@Math.Round(Flags.EncounterRate / 30.0, 2).ToString("F2")x</div>
			<div class="col-slider">
				<Slider @bind-Value="Flags.EncounterRate" Min="0" Max="45" Step="1"></Slider>
			</div>
		</div>
		<div class="row-seperator"></div>
		<div class="row">
			<div class="col-lg-4 noleftpadding">Dungeon Encounter Rate:</div>
			<div class="col-lg-4">@Math.Round(Flags.DungeonEncounterRate / 30.0, 2).ToString("F2")x</div>
			<div class="col-slider">
				<Slider @bind-Value="Flags.DungeonEncounterRate" Min="0" Max="45" Step="1"></Slider>
			</div>
		</div>
		<div class="row-seperator"></div>
		<h4>Experience</h4>
		<div class="row">
			<div class="col-lg-4 noleftpadding">Exp. &amp; Gold Boost:</div>
			<div class="col-lg-4">@Math.Round(Flags.ExpMultiplier * 0.1, 1).ToString("F1")x + @Flags.ExpBonus</div>
			<div class="col-slider">
				<Slider @bind-Value="Flags.ExpMultiplier" Min="10" Max="50" Step="1"></Slider>
				<Slider @bind-Value="Flags.ExpBonus" Min="0" Max="500" Step="10"></Slider>
			</div>
		</div>
		<EnumDropDown UpdateToolTip="@UpdateToolTipID" Id="progressiveScaleModeDropDown" TItem="ProgressiveScaleMode" @bind-Value="Flags.ProgressiveScaleMode">Exp. &amp; Gold Progressive Scaling:</EnumDropDown>
		<CheckBox UpdateToolTip="@UpdateToolTipID" Id="nonesGainXPcheckBox" @bind-Value="Flags.NonesGainXP">Nones Gain XP</CheckBox>
		<CheckBox UpdateToolTip="@UpdateToolTipID" Id="deadsGainXPcheckBox" @bind-Value="Flags.DeadsGainXP">Deads Gain XP</CheckBox>
		<div class="row-seperator"></div>
		<div class="clear-it"></div>
	</div>
		}
	</div>


	@code { [Parameter] public FF1Lib.FlagsViewModel Flags { get; set; }
			[Parameter] public Action<string, MouseEventArgs> UpdateToolTipID { get; set; }
			[Parameter] public bool noTabLayout { get; set; }
			[Parameter] public bool IsOpen { get; set; } = true;
		}
