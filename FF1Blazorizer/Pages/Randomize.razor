@page "/Randomize"
@using FF1Lib;
@using Microsoft.AspNetCore.Components.Web

<div id="main-content">
	<ToolTip @ref="ToolTipElement" ToolTipId="@ToolTipId" />
	<aside id="left-column">
		<FileTab Flags="@Flags" StatusMessage="@StatusMessage" SetStatusMessage="@SetStatusMessage" UpdateToolTipID="@UpdateToolTipID" />
		<FunTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" />
	</aside>

	<main id="right-column">
		<h1>Final Fantasy Randomizer</h1>
		
		<BSTabGroup ShowEvent="@Show" HiddenEvent="@Hidden" HideEvent="@Hide" ShownEvent="@Shown">
			<div class="tab">
				<BSTabList IsVertical="true">
					<BSTab>
						<PresetsTab Flags="@Flags" SetStatusMessage="@SetStatusMessage" />
					</BSTab>
					<BSTab>
						<ShopsTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" />
					</BSTab>
					<BSTab>
						<EnemiesTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" />
					</BSTab>
					<BSTab>
						<TreasuresTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" />
					</BSTab>
					<BSTab>
						<GoalTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" />
					</BSTab>
					<BSTab>
						<MapsTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" />
					</BSTab>
					<BSTab>
						<ScaleTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" />
					</BSTab>
					<BSTab>
						<PartyTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" />
					</BSTab>
					<BSTab>
						<ConveniencesTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" />
					</BSTab>
					<BSTab>
						<BugFixesTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" />
					</BSTab>
					<BSTab>
						<ExperimentalTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" />
					</BSTab>
				</BSTabList>
				</div>
			<BSTabSelectedContent />
		</BSTabGroup>
	</main>
</div>

@code {
	private FlagsViewModel Flags { get; set; } = new FlagsViewModel();
	//[Parameter] public Action<string> SetStatusMessage { get; set; }
	//[Parameter] public string StatusMessage { get; set; }
	private string ToolTipId = "unupdated";
	private ToolTip ToolTipElement;
	private string StatusMessage = "";

	protected override void OnInitialized()
	{
		Flags.PropertyChanged += (sender, args) => StateHasChanged();
		StateHasChanged();
	}

	private void UpdateToolTipID(string Id, MouseEventArgs e)
	{
		ToolTipId = Id;
		ToolTipElement.UpdatePos(ToolTipId, e);
		StateHasChanged();
	}

	void SetStatusMessage(string message)
	{
		StatusMessage = message;
		StateHasChanged();
	}

	private void Show(BSTabEvent e)
	{
		Console.WriteLine($"Show   -> Activated: {e.Activated?.Id.ToString()} , Deactivated: {e.Deactivated?.Id.ToString()}");
	}
	private void Shown(BSTabEvent e)
	{
		Console.WriteLine($"Shown  -> Activated: {e.Activated?.Id.ToString()} , Deactivated: {e.Deactivated?.Id.ToString()}");
	}
	private void Hide(BSTabEvent e)
	{
		Console.WriteLine($"Hide   ->  Activated: {e.Activated?.Id.ToString()} , Deactivated: {e.Deactivated?.Id.ToString()}");
	}
	private void Hidden(BSTabEvent e)
	{
		Console.WriteLine($"Hidden -> Activated: {e.Activated?.Id.ToString()} , Deactivated: {e.Deactivated?.Id.ToString()}");
	}
 }

